<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zeus</name>
    </assembly>
    <members>
        <member name="T:Zeus.CircularBuffer`1">
            <summary>
            Represents a strongly typed circular buffer.
            </summary>
            <typeparam name="T">The type of the objects stored in the buffer.</typeparam>
        </member>
        <member name="F:Zeus.CircularBuffer`1.m_SyncRoot">
            <summary>
            The syncronization object used by the buffer.
            </summary>
        </member>
        <member name="F:Zeus.CircularBuffer`1.m_DataStore">
            <summary>
            The array that stores the collection data;
            </summary>
        </member>
        <member name="F:Zeus.CircularBuffer`1.m_Head">
            <summary>
            The circular index that point to the head element.
            </summary>
        </member>
        <member name="M:Zeus.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            creates a new <see cref="T:Zeus.CircularBuffer`1"/> and initialize its internal fields.
            </summary>
            <param name="capacity">The <see cref="T:Zeus.CircularBuffer`1"/> capacity.</param>
        </member>
        <member name="P:Zeus.CircularBuffer`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Zeus.CircularBuffer`1"/> .
            </summary>
        </member>
        <member name="P:Zeus.CircularBuffer`1.IsSynchronized">
            <summary>
             Gets a value indicating whether access to the <see cref="T:Zeus.CircularBuffer`1"/> is synchronized (thread safe)
            </summary>
        </member>
        <member name="P:Zeus.CircularBuffer`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Zeus.CircularBuffer`1"/>.
            </summary>
        </member>
        <member name="M:Zeus.CircularBuffer`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Zeus.CircularBuffer`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> where the <see cref="T:Zeus.CircularBuffer`1"/> elements will be copy.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Zeus.CircularBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Zeus.CircularBuffer`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Zeus.CircularBuffer`1.Add(`0)">
            <summary>
            Adds a new element to the <see cref="T:Zeus.CircularBuffer`1"/>.
            </summary>
            <param name="element">The new element that has to be added.</param>
        </member>
        <member name="M:Zeus.CircularBuffer`1.ChangeCapacity(System.Int32)">
            <summary>
            Updates the buffer capacity to the new value.
            </summary>
            <param name="newCapacity">The new buffer capacity.</param>
        </member>
        <member name="P:Zeus.CircularBuffer`1.IsFull">
            <summary>
            Gets a flag that tell if the buffer is full.
            </summary>
        </member>
        <member name="P:Zeus.CircularBuffer`1.Capacity">
            <summary>
            Gets the buffer capacity.
            </summary>
        </member>
        <member name="T:Zeus.CircularBuffer`1.Enumerator">
            <summary>
            Enumerator class used to iterate throught the element of the collection.
            </summary>
        </member>
        <member name="F:Zeus.CircularBuffer`1.Enumerator.m_Buffer">
            <summary>
            The buffer instance that has to be enumerated.
            </summary>
        </member>
        <member name="F:Zeus.CircularBuffer`1.Enumerator.m_CurrentIdx">
            <summary>
            The index of the current item in the buffer.
            </summary>
        </member>
        <member name="F:Zeus.CircularBuffer`1.Enumerator.m_ItemCount">
            <summary>
            Count the number of iterated items;
            </summary>
        </member>
        <member name="M:Zeus.CircularBuffer`1.Enumerator.#ctor(Zeus.CircularBuffer{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Zeus.CircularBuffer`1.Enumerator"/> for the <see cref="T:Zeus.CircularBuffer`1"/> provided.
            </summary>
            <param name="buffer">The <see cref="T:Zeus.CircularBuffer`1"/> object that has to be enumerated.</param>
        </member>
        <member name="P:Zeus.CircularBuffer`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:Zeus.CircularBuffer`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Zeus.CircularBuffer`1.Enumerator.Dispose">
            <summary>
            Release <see cref="T:Zeus.CircularBuffer`1.Enumerator"/> resources.
            </summary>
        </member>
        <member name="M:Zeus.CircularBuffer`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Zeus.CircularBuffer`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Zeus.CircularIndex">
            <summary>
            Implements an index that automatically wrap around a maximum capacity.
            </summary>
        </member>
        <member name="F:Zeus.CircularIndex.m_Idx">
            <summary>
            The actual index value.
            </summary>
        </member>
        <member name="F:Zeus.CircularIndex.m_Capacity">
            <summary>
            The maximum size value.
            </summary>
        </member>
        <member name="M:Zeus.CircularIndex.#ctor(System.Int32)">
            <summary>
            Initialize the index to zero and set its maximum capacity.
            </summary>
            <param name="capacity">The maximum index capacity.</param>
        </member>
        <member name="M:Zeus.CircularIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the index to the initial value and set its maximum capacity.
            </summary>
            <param name="capacity">The maximum index capacity.</param>
            <param name="initialValue">The index initial value.</param>
        </member>
        <member name="P:Zeus.CircularIndex.Capacity">
            <summary>
            Gets the <see cref="T:Zeus.CircularIndex"/> capacity.
            </summary>
        </member>
        <member name="M:Zeus.CircularIndex.Mod(System.Int32,System.Int32)">
            <summary>
            Computes the modulus of the given number using <paramref name="mod"/> as base.
            </summary>
            <param name="val">The number to wich the modulus must be computed.</param>
            <param name="mod">The modulus value.</param>
            <returns>The modulus of the given number.</returns>
        </member>
        <member name="T:Zeus.ErrorCodes">
            <summary>
            Defines the Zeus framework error codes.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.Undefined">
            <summary>
            Undefined error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.InvalidTag">
            <summary>
            Tag not valid error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.InvalidIndex">
            <summary>
            Index not valid error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.TypeMismatch">
            <summary>
            Type not matching or not compatible error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.DuplicatedTag">
            <summary>
            Tag already exists error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.ConfigManagerInitFailed">
            <summary>
            Configuration manager initialization failed error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.MissingSettingsKey">
            <summary>
            Requested key missing error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.InvalidSettings">
            <summary>
            Invalid settings value error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.RepositoryPathNotExist">
            <summary>
            Repository path does not exist error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.RepositoryClassNotFound">
            <summary>
            The requested repository class was not found error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.RegistrationAlreadyExists">
            <summary>
            The registration already exists error.
            </summary>
        </member>
        <member name="F:Zeus.ErrorCodes.RegistrationDoNotExists">
            <summary>
            The registration do not exist error.
            </summary>
        </member>
        <member name="T:Zeus.Exceptions.ZeusException">
            <summary>
            Generic exception class for Zeus framework.
            </summary>
        </member>
        <member name="P:Zeus.Exceptions.ZeusException.ErrorCode">
            <summary>
            The error code associated to the current instance.
            </summary>
        </member>
        <member name="M:Zeus.Exceptions.ZeusException.#ctor">
            <summary>
            Initialize a new instance of the class with the given error code.
            </summary>
        </member>
        <member name="M:Zeus.Exceptions.ZeusException.#ctor(Zeus.ErrorCodes,System.String)">
            <summary>
            Initialize a new instance of the class with the given error code.
            </summary>
            <param name="code">The error code associated with the occurred error.</param>
            <param name="message">The message that describes the occurred error.</param>
        </member>
        <member name="M:Zeus.Exceptions.ZeusException.#ctor(System.Exception,Zeus.ErrorCodes,System.String)">
            <summary>
            Initialize a new instance of the class with the specified message, inner exception and error code.
            </summary>
            <param name="innerException"></param>
            <param name="code">The code associated with the occurred error.</param>
            <param name="message">The message that describes the occurred error.</param>
        </member>
        <member name="M:Zeus.Exceptions.ZeusException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialize a new instance of the class with the specified serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Zeus.Extensions.IComparableExtension">
            <summary>
            Provides extension methods for object that implements the <see cref="T:System.IComparable`1"/> interface.
            </summary>
        </member>
        <member name="M:Zeus.Extensions.IComparableExtension.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the value between provided minimum and maximum values.
            </summary>
            <typeparam name="T">The type of the object wich value has to be clamped.</typeparam>
            <param name="val">The value to be checked.</param>
            <param name="min">The minimum allowable value.</param>
            <param name="max">The maximum allowable value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="T:Zeus.FormatParser">
            <summary>
            Parses a Zeus format string.
            </summary>
        </member>
        <member name="F:Zeus.FormatParser.c_MatchPattern">
            <summary>
            Match pattern used by <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"/> to format the file name.
            </summary>
        </member>
        <member name="M:Zeus.FormatParser.Parse(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Prepare the given format string to be used in a <see cref="M:System.String.Format(System.String,System.Object[])"/> call.
            </summary>
            <param name="format">The format string to be parsed.</param>
            <param name="keys">The keys that has to be replaced.</param>
            <returns>The parsed format string.</returns>
        </member>
        <member name="T:Zeus.Patterns.Singleton`1">
            <summary>
            Provides a base implmenetation for the singleton pattern.
            </summary>
            <typeparam name="T">The singleton type.</typeparam>
        </member>
        <member name="F:Zeus.Patterns.Singleton`1.s_Instance">
            <summary>
            The one and only instance of the singleton class.
            </summary>
        </member>
        <member name="P:Zeus.Patterns.Singleton`1.Instance">
            <summary>
            Gets the one and only singleton instance.
            </summary>
        </member>
        <member name="M:Zeus.Patterns.Singleton`1.#cctor">
            <summary>
            Initialize class fields.
            </summary>
        </member>
        <member name="T:Zeus.Patterns.TypeSafeEnumBase`1">
            <summary>
            Provies base functionalities for a class that implement the Type Safe Enum pattern.
            </summary>
            <typeparam name="T">The type of the class that has to implement the Type Safe Enum pattern.</typeparam>
        </member>
        <member name="F:Zeus.Patterns.TypeSafeEnumBase`1.s_Instances">
            <summary>
            The list of type safe enum instances.
            </summary>
        </member>
        <member name="F:Zeus.Patterns.TypeSafeEnumBase`1.s_InstanceCounter">
            <summary>
            An instance counter. Provides defautl value for int conversion.
            </summary>
        </member>
        <member name="F:Zeus.Patterns.TypeSafeEnumBase`1.m_Id">
            <summary>
            The ID of the current Type Safe Enunm value.
            </summary>
        </member>
        <member name="M:Zeus.Patterns.TypeSafeEnumBase`1.#cctor">
            <summary>
            Initialize class static fields.
            </summary>
        </member>
        <member name="M:Zeus.Patterns.TypeSafeEnumBase`1.#ctor">
            <summary>
            Initialize class fields.
            </summary>
        </member>
        <member name="P:Zeus.Patterns.TypeSafeEnumBase`1.Values">
            <summary>
            Gets the readonly list of all existing class intances.
            </summary>
        </member>
        <member name="M:Zeus.Patterns.TypeSafeEnumBase`1.GetValues">
            <summary>
            Gets all the Type Safe Enum values.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> object that contains all the existing Type Safe Enum values.</returns>
        </member>
        <member name="M:Zeus.Patterns.TypeSafeEnumBase`1.op_Implicit(Zeus.Patterns.TypeSafeEnumBase{`0})~System.Int32">
            <summary>
            Operators that convert the Type Safe Enum value into int.
            </summary>
            <param name="value">The Type Safe Enum value to be converted.</param>
        </member>
    </members>
</doc>
