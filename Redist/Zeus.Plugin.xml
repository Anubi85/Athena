<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zeus.Plugin</name>
    </assembly>
    <members>
        <member name="T:Zeus.Plugin.AppDomainExtension">
            <summary>
            Extension methods for <see cref="T:System.AppDomain"/> class.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.AppDomainExtension.CreateInstance``1(System.AppDomain)">
            <summary>
            Create a new instance of the specified type in the caller <see cref="T:System.AppDomain"/> and unwrap it.
            </summary>
            <typeparam name="T">The type wich instance shall be created. Must inherit from <see cref="T:System.MarshalByRefObject"/>.</typeparam>
            <param name="domain">The <see cref="T:System.AppDomain"/> where the new instance will be created.</param>
            <returns>The unwrapped new instance.</returns>
        </member>
        <member name="T:Zeus.Plugin.ExportPluginAttribute">
            <summary>
            This attribute allows to the <see cref="T:Zeus.Plugin.PluginLoader"/> to recognize the class as a plugin.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.ExportPluginAttribute.#ctor(System.Type)">
            <summary>
            Store the type of the exported class.
            </summary>
            <param name="pluginType">Type of the exported plugin.</param>
        </member>
        <member name="P:Zeus.Plugin.ExportPluginAttribute.PluginType">
            <summary>
            Gets the type of the exported class.
            </summary>
        </member>
        <member name="T:Zeus.Plugin.ExportPluginMetadataAttribute">
            <summary>
            This attribute allows to <see cref="T:Zeus.Plugin.PluginLoader"/> to read metadata associated with a plugin.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.ExportPluginMetadataAttribute.#ctor(System.String,System.Object)">
            <summary>
            Store the metadata of the exported class.
            </summary>
            <param name="name">The name of the metadata.</param>
            <param name="value">The metadata value.</param>
        </member>
        <member name="P:Zeus.Plugin.ExportPluginMetadataAttribute.Name">
            <summary>
            Gets the metadata name.
            </summary>
        </member>
        <member name="P:Zeus.Plugin.ExportPluginMetadataAttribute.Value">
            <summary>
            Gets the metadata value.
            </summary>
        </member>
        <member name="T:Zeus.Plugin.PluginFactory`1">
            <summary>
            A factory that creates instance of the given type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the objects instantieted by the factory.</typeparam>
        </member>
        <member name="M:Zeus.Plugin.PluginFactory`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize class fields and load the assembly provided if needed.
            </summary>
            <param name="asmName">The name of the assembly that contains the requested type.</param>
            <param name="asmPath">The path of the assembly that contains the requested type.</param>
            <param name="typeName">The name of the type to load.</param>
        </member>
        <member name="F:Zeus.Plugin.PluginFactory`1.m_InstancesType">
            <summary>
            The type of the instances created by this facotry.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.PluginFactory`1.CreateInstance">
            <summary>
            Create a new instance of the type assocated with the factory.
            </summary>
            <returns>The newly created instance.</returns>
        </member>
        <member name="P:Zeus.Plugin.PluginFactory`1.PluginType">
            <summary>
            Gets the type of the plugin.
            </summary>
        </member>
        <member name="T:Zeus.Plugin.PluginSettings">
            <summary>
            Contains the settings of the application plugin loader.
            The name of the Xml configration file node associated with this class is "plugin".
            </summary>
        </member>
        <member name="F:Zeus.Plugin.PluginSettings.m_RepositorySettings">
            <summary>
            List of objects that contains configuration information for plugin repositories.
            </summary>
        </member>
        <member name="F:Zeus.Plugin.PluginSettings.s_AvaialbleRepositories">
            <summary>
            A dictionary that associate avaialble repository types to its names.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.PluginSettings.#ctor">
            <summary>
            Initializes internal class fields.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.PluginSettings.#cctor">
            <summary>
            Initialize class static fields.
            </summary>
        </member>
        <member name="P:Zeus.Plugin.PluginSettings.RepositorySettings">
            <summary>
            Gets a list of objects that contains channels configuration information.
            </summary>
        </member>
        <member name="T:Zeus.Plugin.Repositories.AssemblyRepository">
            <summary>
            Represent a repository mapped to an assembly.
            </summary>
        </member>
        <member name="F:Zeus.Plugin.Repositories.AssemblyRepository.c_AssemblyNameTag">
            <summary>
            The tag name of the assembly name data in the <see cref="T:Zeus.Data.DataStore"/> object that contains repository settings.
            </summary>
        </member>
        <member name="F:Zeus.Plugin.Repositories.AssemblyRepository.c_AssemblyTag">
            <summary>
            The tag name of the assembly data in the <see cref="T:Zeus.Data.DataStore"/> object that contains repository settings.
            </summary>
        </member>
        <member name="F:Zeus.Plugin.Repositories.AssemblyRepository.m_Assembly">
            <summary>
            The Assembly associated with the repository.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.AssemblyRepository.Initialize(Zeus.Data.DataStore)">
            <summary>
            Initialize the repository object.
            </summary>
            <param name="settings">The data needed to initialize the repository.</param>
        </member>
        <member name="M:Zeus.Plugin.Repositories.AssemblyRepository.Inspect">
            <summary>
            Inspects the repository and retrieve information about avaialble plugins.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.AssemblyRepository.EqualsTo(Zeus.Data.DataStore)">
            <summary>
            Compare the current repository object with the settings provided to check if it is the same.
            </summary>
            <param name="settings">the repository settings that has to be checked.</param>
            <returns>Returns true if the repository are the same, false otherwise.</returns>
        </member>
        <member name="T:Zeus.Plugin.Repositories.DirectoryRepository">
            <summary>
            Represent a repository mapped to a computer directory.
            </summary>
        </member>
        <member name="F:Zeus.Plugin.Repositories.DirectoryRepository.c_DirectoryPathTag">
            <summary>
            The tag name of the directory path data in the <see cref="T:Zeus.Data.DataStore"/> object that contains repository settings.
            </summary>
        </member>
        <member name="F:Zeus.Plugin.Repositories.DirectoryRepository.m_directoryPath">
            <summary>
            The path of the directory to wich the repository is linked.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.DirectoryRepository.Initialize(Zeus.Data.DataStore)">
            <summary>
            Initialize the repository object.
            </summary>
            <param name="settings">The data needed to initialize the repository.</param>
        </member>
        <member name="M:Zeus.Plugin.Repositories.DirectoryRepository.Inspect">
            <summary>
            Inspects the repository and retrieve information about avaialble plugins.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.DirectoryRepository.EqualsTo(Zeus.Data.DataStore)">
            <summary>
            Compare the current repository object with the settings provided to check if it is the same.
            </summary>
            <param name="settings">the repository settings that has to be checked.</param>
            <returns>Returns true if the repository are the same, false otherwise.</returns>
        </member>
        <member name="T:Zeus.Plugin.Repositories.DirectoryRepository.Inspector">
            <summary>
            Helper class that allow to perform directory inspectio into another <see cref="T:System.AppDomain"/>.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.DirectoryRepository.Inspector.Inspect(System.String)">
            <summary>
            Inspect the given directory and discover all the possible plugins.
            </summary>
            <param name="folder">The directory to be inspected.</param>
            <returns>The list of the discovered records.</returns>
        </member>
        <member name="T:Zeus.Plugin.Repositories.RepositoryBase">
            <summary>
            defines methods and properties that a repository inspector must implements.
            </summary>
        </member>
        <member name="F:Zeus.Plugin.Repositories.RepositoryBase.m_Records">
            <summary>
            The list of the possible plugins found in the repository.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryBase.Initialize(Zeus.Data.DataStore)">
            <summary>
            Initialize the repository object.
            </summary>
            <param name="settings">The data needed to initialize the repository.</param>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryBase.Inspect">
            <summary>
            Inspects the repository and retrieve information about avaialble plugins.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryBase.GetFactories``1">
            <summary>
            Gets all the avaialble plugin <see cref="T:Zeus.Plugin.PluginFactory`1"/> for the requested plugin type.
            </summary>
            <typeparam name="T">The type of the requested plugin.</typeparam>
            <returns>A collection of all the <see cref="T:Zeus.Plugin.PluginFactory`1"/> capable to instantiate a plugin of the requested type.</returns>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryBase.GetFactories``2(System.Func{``1,System.Boolean})">
            <summary>
            Gets all the avaialble plugin <see cref="T:Zeus.Plugin.PluginFactory`1"/> for the requsted plugin type and that satisfy the filtering function.
            </summary>
            <typeparam name="T">The type of the requestd plugin.</typeparam>
            <typeparam name="TMetaData">The type of the plugin metadata.</typeparam>
            <param name="filter">The filtering funtion used to filter the available plugins.</param>
            <returns>A collection of all the <see cref="T:Zeus.Plugin.PluginFactory`1"/> capable to instantiate a plgin of the request type and which metadata satisfy the filtering function.</returns>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryBase.InspectAssembly(System.Reflection.Assembly)">
            <summary>
            Inspect the given assembly to discovery all avaialble plugins.
            </summary>
            <param name="asm">The <see cref="T:System.Reflection.Assembly"/> to inspect.</param>
            <returns>The list of the information about the founded plugins.</returns>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryBase.GetMetaData``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the metadata object instance. Eventually create a runtime dummy type to store metadata if <typeparamref name="TMetaData"/> <see cref="T:System.Type"/> id an interface.
            </summary>
            <typeparam name="TMetaData">The type of the metadata.</typeparam>
            <param name="metadata">The metadata information.</param>
            <returns>The object of type <typeparamref name="TMetaData"/> that contains the metadata information.</returns>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryBase.CreateDummyType(System.Type)">
            <summary>
            Create a dummy type for store metadata information. USed when metadata type is an interface.
            </summary>
            <param name="metadataType">The metadata interface <see cref="T:System.Type"/>.</param>
            <returns>A new type that implement the provided interface.</returns>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryBase.EqualsTo(Zeus.Data.DataStore)">
            <summary>
            Compare the current repository object with the settings provided to check if it is the same.
            </summary>
            <param name="settings">the repository settings that has to be checked.</param>
            <returns>Returns true if the repository are the same, false otherwise.</returns>
        </member>
        <member name="T:Zeus.Plugin.Repositories.RepositoryRecord">
            <summary>
            Contains all the information relative to a repository record.
            </summary>
        </member>
        <member name="F:Zeus.Plugin.Repositories.RepositoryRecord.s_MetaDataTypesCache">
            <summary>
            A cache to store the dummy types created for the metadata interfaces.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryRecord.#ctor(System.String,System.String,System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initialize class properties.
            </summary>
            <param name="assemblyName">Name of the <see cref="T:System.Reflection.Assembly"/>.</param>
            <param name="assemblyPath">Path of the <see cref="T:System.Reflection.Assembly"/>.</param>
            <param name="typeName">Name of the exported plugin <see cref="T:System.Type"/>.</param>
            <param name="exportedType">The plugin exported <see cref="T:System.Type"/>.</param>
            <param name="metadata">Metadata of the exported plugin.</param>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryRecord.#cctor">
            <summary>
            Initialize class static fields.
            </summary>
        </member>
        <member name="P:Zeus.Plugin.Repositories.RepositoryRecord.AssemblyName">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly"/> name.
            </summary>
        </member>
        <member name="P:Zeus.Plugin.Repositories.RepositoryRecord.AssemblyPath">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly"/> path.
            </summary>
        </member>
        <member name="P:Zeus.Plugin.Repositories.RepositoryRecord.TypeName">
            <summary>
            Gets the <see cref="T:System.Type"/> name of the exported type
            </summary>
        </member>
        <member name="P:Zeus.Plugin.Repositories.RepositoryRecord.ExportedType">
            <summary>
            Gets the plugin exported type.
            </summary>
        </member>
        <member name="P:Zeus.Plugin.Repositories.RepositoryRecord.MetaData">
            <summary>
            Gets the plugin metadata.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryRecord.BuildDummyMetaData(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Builds at runtime a dummy type that implement the metadata interface and exposes the exported plugin metadata.
            </summary>
            <param name="metadataType">The <see cref="T:System.Type"/> of the exported plugin metadata. Must be an interface.</param>
            <param name="metadata">The metadata of the exported plugin.</param>
            <returns></returns>
        </member>
        <member name="T:Zeus.Plugin.Repositories.RepositoryTypes">
            <summary>
            Provides the avaialble plugin repository types using a Type Safe Enum pattern.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryTypes.#ctor(System.Type,System.String)">
            <summary>
            Initialize a new <see cref="T:Zeus.Plugin.Repositories.RepositoryTypes"/> value.
            </summary>
            <param name="repositoryClassType">The <see cref="T:System.Type"/> of the repository class associated with the cirrent value.</param>
            <param name="description">Te description of the current value.</param>
        </member>
        <member name="P:Zeus.Plugin.Repositories.RepositoryTypes.RepositoryClassType">
            <summary>
            Gets the type that implement the current repository value.
            </summary>
        </member>
        <member name="P:Zeus.Plugin.Repositories.RepositoryTypes.Description">
            <summary>
            Gets the description of the current repository value.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryTypes.op_Implicit(Zeus.Plugin.Repositories.RepositoryTypes)~System.Type">
            <summary>
            Converts the <see cref="T:Zeus.Plugin.Repositories.RepositoryTypes"/> value into the type that implement the current value.
            </summary>
            <param name="value">The <see cref="T:Zeus.Plugin.Repositories.RepositoryTypes"/> value to be converted.</param>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryTypes.op_Implicit(Zeus.Plugin.Repositories.RepositoryTypes)~System.String">
            <summary>
            Converts the <see cref="T:Zeus.Plugin.Repositories.RepositoryTypes"/> value into into its description.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Zeus.Plugin.Repositories.RepositoryTypes.op_Implicit(System.String)~Zeus.Plugin.Repositories.RepositoryTypes">
            <summary>
            Converts the type name into corresponding <see cref="T:Zeus.Plugin.Repositories.RepositoryTypes"/> if exists, return null otherwise.
            </summary>
            <param name="typeName">The name of the type to be converted.</param>
        </member>
        <member name="F:Zeus.Plugin.Repositories.RepositoryTypes.Directory">
            <summary>
            The <see cref="T:Zeus.Plugin.Repositories.DirectoryRepository"/> value.
            </summary>
        </member>
        <member name="F:Zeus.Plugin.Repositories.RepositoryTypes.Assembly">
            <summary>
            The <see cref="T:Zeus.Plugin.Repositories.AssemblyRepository"/> value.
            </summary>
        </member>
        <member name="T:Zeus.Plugin.PluginLoader">
            <summary>
            Loads plugin from configured repositories.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.PluginLoader.#cctor">
            <summary>
            Initialize class fields.
            </summary>
        </member>
        <member name="F:Zeus.Plugin.PluginLoader.s_Repositories">
            <summary>
            The list of the configured repositories.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.PluginLoader.AddRepository(Zeus.Plugin.Repositories.RepositoryTypes,Zeus.Data.DataStore)">
            <summary>
            Add a new repository to the <see cref="T:Zeus.Plugin.PluginLoader"/>.
            </summary>
            <param name="type">The type of the repository that has to be added.</param>
            <param name="settings">The data needed to initialize the repository.</param>
        </member>
        <member name="M:Zeus.Plugin.PluginLoader.UpdateRepositorties">
            <summary>
            Re-perform an inspection of all the configured repositories and update plugins data.
            </summary>
        </member>
        <member name="M:Zeus.Plugin.PluginLoader.GetFactories``1">
            <summary>
            Gets all the avaialble plugin <see cref="T:Zeus.Plugin.PluginFactory`1"/> for the requested plugin type.
            </summary>
            <typeparam name="T">The type of the requested plugin.</typeparam>
            <returns>A collection of all the <see cref="T:Zeus.Plugin.PluginFactory`1"/> capable to instantiate a plugin of the requested type.</returns>
        </member>
        <member name="M:Zeus.Plugin.PluginLoader.GetFactories``2(System.Func{``1,System.Boolean})">
            <summary>
            Gets all the avaialble plugin <see cref="!:PluginFactory&lt;T, TMetaData&gt;"/> for the requsted plugin type and that satisfy the filtering function.
            </summary>
            <typeparam name="T">The type of the requestd plugin.</typeparam>
            <typeparam name="TMetaData">The type of the plugin metadata.</typeparam>
            <param name="filter">The filtering funtion used to filter the available plugins.</param>
            <returns>A collection of all the <see cref="!:PluginFactory&lt;T, TMetaData&gt;"/> capable to instantiate a plgin of the request type and which metadata satisfy the filtering function.</returns>
        </member>
    </members>
</doc>
